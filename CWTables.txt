DROP SCHEMA TicketSystem CASCADE;
CREATE SCHEMA TicketSystem;
SET SEARCH_PATH TO TicketSystem;

-- RELATION DEFINITIONS

CREATE TABLE Staff
(
	StaffID		INTEGER PRIMARY KEY
	    CHECK (StaffID > 0),
	Name			VARCHAR(40) NOT NULL
		CHECK (Name <> '')
		-- CHECK THAT ENTRY ISN'T BLANK STRING
);

CREATE TABLE Product
(
	ProductID		INTEGER PRIMARY KEY
	    CHECK (ProductID > 0),
	Name			VARCHAR(40) NOT NULL
		CHECK (Name <> '')
		-- CHECK THAT ENTRY ISN'T BLANK STRING
);

CREATE TABLE Customer
(
	CustomerID		INTEGER PRIMARY KEY
	    CHECK (CustomerID > 0),
	Name			VARCHAR(40) NOT NULL
		CHECK (Name <> ''),
		-- CHECK THAT ENTRY ISN'T BLANK STRING
	Email			VARCHAR(40) NOT NULL UNIQUE
		CHECK (Email <> '')
		-- CHECK THAT ENTRY ISN'T BLANK STRING
);

CREATE TABLE Ticket
(
	TicketID		INTEGER PRIMARY KEY
	    CHECK (TicketID > 0),
	Problem		VARCHAR(1000) NOT NULL
		CHECK (Problem <> ''),
		-- CHECK THAT ENTRY ISN'T BLANK STRING
	Status		VARCHAR(20) NOT NULL,
	-- ALTER TABLE STATEMENT ADDS COMPLEX CHECK CONSTRAINT
	Priority		INTEGER NOT NULL
		CHECK (Priority >= 1 AND Priority <= 3),
	LoggedTime		TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	    -- CHECK INPUTTED TIME ISN'T IN THE FUTURE
	CustomerID		INTEGER NOT NULL,
	FOREIGN KEY (CustomerID) REFERENCES Customer
			ON DELETE RESTRICT
			ON UPDATE CASCADE,
	ProductID		INTEGER NOT NULL,
	FOREIGN KEY (ProductID) REFERENCES Product
			ON DELETE CASCADE
			ON UPDATE CASCADE
);

CREATE TABLE TicketUpdate
(
	TicketUpdateID	INTEGER PRIMARY KEY
	    CHECK (TicketUpdateID > 0),
	Message		VARCHAR(1000) NOT NULL
		CHECK (Message <> ''),
		-- CHECK THAT ENTRY ISN'T BLANK STRING
	UpdateTime		TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	    -- CHECK INPUTTED TIME ISN'T IN THE FUTURE
	TicketID		INTEGER NOT NULL,
	FOREIGN KEY (TicketID) REFERENCES Ticket
			ON DELETE CASCADE
			ON UPDATE CASCADE,
	StaffID		INTEGER,
	FOREIGN KEY (StaffID) REFERENCES Staff
			ON DELETE RESTRICT
			ON UPDATE CASCADE
);

-- CONSTRUCT TICKET STATUS CHECK CONSTRAINT

CREATE OR REPLACE FUNCTION ticketHasUpdate (INTEGER) RETURNS BOOL AS $$
	SELECT EXISTS(SELECT TicketID FROM TicketUpdate WHERE TicketID = $1);
$$
	LANGUAGE sql;
	
ALTER TABLE Ticket
	ADD CONSTRAINT STATUS_CHECK CHECK ((Status = 'open') OR (Status = 'closed' AND ticketHasUpdate(TicketID) = TRUE));

CREATE OR REPLACE FUNCTION StatusDomainIntegrityCorrection() RETURNS TRIGGER AS $$
BEGIN
UPDATE ticket SET status = 'open' WHERE (tickethasupdate(ticketID) = FALSE);
RETURN new;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER StatusDomainIntegrityTrigger
AFTER DELETE ON ticketupdate
EXECUTE PROCEDURE StatusDomainIntegrityCorrection();


-- VIEW FOR QUERYING OPEN TICKETS AND UPDATES

CREATE VIEW openticket AS
    SELECT * FROM ticket WHERE status = 'open';

CREATE VIEW openticketlatestupdate AS
	SELECT openticket.ticketid, to_char(max(updatetime), 'YYYY MM DD HH24:MI:SS') AS LatestUpdate
	FROM openticket LEFT JOIN ticketupdate
	ON openticket.ticketid = ticketupdate.ticketid GROUP BY openticket.ticketid;

-- CHAIN OF TICKETS AND ASSOCIATED UPDATES REPORTING FUNCTION

CREATE OR REPLACE FUNCTION ticketandupdates(ticktid INT) RETURNS
    table(atime TEXT, description CHARACTER VARYING, author CHARACTER VARYING) AS $$
DECLARE
	customer CHARACTER VARYING := name FROM ticket, customer
	WHERE ticket.customerid = customer.customerid AND ticketid = $1;
BEGIN
RETURN query SELECT to_char(loggedtime, 'YYYY MM DD HH24:MI:SS') AS loggedtime, message, an_author FROM

(
    -- GET ORIGINAL TICKET
    SELECT loggedtime, problem AS message, customer AS an_author FROM ticket WHERE ticketid = $1
    UNION
    -- GET TICKETUPDATES ASSOCIATED WITH STAFF
    SELECT updatetime AS loggedtime, message, name AS an_author
        FROM ticketupdate, staff WHERE ticketid = $1 and ticketupdate.staffid = staff.staffid
    UNION
    -- GET TICKETUPDATES ASSOCIATED WITH CUSTOMER
    SELECT updatetime AS loggedtime, message, customer AS an_author
        FROM ticketupdate, staff WHERE (ticketupdate.staffid is null) AND ticketid = $1
)

-- UNION AND ORDER BY LOGGEDTIME
AS temp ORDER BY loggedtime;
END
$$ LANGUAGE plpgsql;

-- CLOSED TICKET AND UPDATE REPORTING

CREATE TYPE closedticketstatus AS
	(number_of_updates INT, problem_description CHARACTER VARYING, timeuntilfirstupdate TEXT, timeuntillastupdate TEXT);

CREATE OR REPLACE FUNCTION ticketupdatestatus() RETURNS SETOF closedticketstatus AS $$
DECLARE
	ids BIGINT[] := ARRAY(SELECT ticketid FROM ticket WHERE status = 'closed');
	id BIGINT;

	description CHARACTER VARYING;
	num_updates INT;
	original_time TIMESTAMP;
	first_update_time TIMESTAMP;
	latest_update_time TIMESTAMP;

	ret RECORD;
BEGIN
	foreach id in ARRAY ids
	loop
		num_updates := COUNT(*) FROM ticketupdate WHERE ticketid = id;
		description := problem FROM ticket WHERE ticketid = id;
		original_time := loggedtime FROM ticket WHERE ticketid = id;
		first_update_time := min(updatetime) FROM ticketupdate WHERE ticketid = id;
		latest_update_time := max(updatetime) FROM ticketupdate WHERE ticketid = id;

		SELECT num_updates, description,
		to_char(first_update_time-original_time, 'DD HH24:MI:SS'),
		to_char(latest_update_time-original_time, 'DD HH24:MI:SS')
		into ret;

		RETURN next ret;
	END	loop;
END
$$ LANGUAGE plpgsql;

CREATE OR REPLACE VIEW closedticketupdatestatus
	AS SELECT * FROM ticketupdatestatus();


-- INDEXES (ONLY INCLUDED FREQUENCY QUERIED COLUMNS VIA WEBSITE)
CREATE INDEX Status_index ON Ticket (Status);
CREATE INDEX TicketUpdate_TicketID_index ON TicketUpdate (TicketID);
